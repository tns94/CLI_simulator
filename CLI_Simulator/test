package mwork;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BitRepresentation {
	 public static void main(String[] args) throws IOException {
		Path path = Paths.get("C:\\Users\\tarunsharma\\Downloads\\test.pdf");
		byte bytes[]=Files.readAllBytes(path);
		 Map<String, Integer> map= new TreeMap<String, Integer>();
		 Map<Byte,String> bitMap=new HashMap<>();
		 Map<String,Byte> bitMapR=new HashMap<>();
			byte tb;
			String str;
		 //String bitArr[]=new String[256];
		 for(int i=0;i<256;i++){
			 tb=(byte)(i-128);
			 str=toBinary(i-128);
			 bitMap.put(tb,str );
			 bitMapR.put(str,tb);
		 }
		 
		 
		StringBuilder bitRe=new StringBuilder();
		
		System.out.println(bytes.length);
	
		for (byte byt:bytes)
		{
			
			//bitRe=new StringBuilder();
				//str=toBinary(bits);
			bitRe.append(bitMap.get(byt));
			//System.out.print(bitRe);
			//if (bitRe.length()>200002)break;
		}
		
		byte byteArr[]=new byte[bitRe.length()/8];
		for(int j=0,i=0;i<bitRe.length();i+=8,j++){
			byteArr[j]=bitMapR.get(bitRe.substring(i, i+8));
		}
		path = Paths.get("C:\\Users\\tarunsharma\\Downloads\\test2.pdf");
		Files.write(path, byteArr);
		
		StringBuilder hash=new StringBuilder();
		Pattern pattern = Pattern.compile("0+|1+");
		Matcher matcher=pattern.matcher(bitRe);//.substring(0, 200000));
		String token;
		int hashco;
		while(matcher.find()){
			token=matcher.group();
			hashco=token.length();
			
				
			hash.append("#"+hashco+""+token.charAt(0));
			
			
			if (map.containsKey(token))
				map.put(token, map.get(token)+1);
			else
				map.put(token,1);
		}
		/*for (int i=0;i<bitRe.length();i+=8)
		{
			str=bitRe.substring(i,i+8).toString();
			//bitRe.delete(i,i+8);
			System.out.print((char)Integer.valueOf(str, 2).intValue());
		}*/
		//System.out.println(map);
		System.out.println(hash.length());
		System.out.println(bitRe.length()/8);
		
		//System.out.println(bitRe.substring(0, 200000));
		
		
	}
	static String toBinary(int b)
	{
		StringBuilder binary=new StringBuilder();
		int pr=b;
		if (pr==-128)
			return "10000000";
		if (b<0){
			
			binary.append(1);
			b*=-1;
		}
		else if (b>0)
			binary.append(0);
		else
			return "00000000";
		
		
		
		while(b!=1 && b!=-1)
		{
			binary.insert(1,b%2);
			b/=2;
		}
		
		binary.insert(1,1);
		int ap=8-binary.length();
		for (int i = 0; i < ap; i++) 
			binary.insert(1, 0);
			
		
		
		
	
		
		//b=Byte.valueOf(binary.toString(), 2);
		return binary.toString();
	}
	

}
